import{_ as s,c as e,a3 as a,o as i}from"./chunks/framework.DWZwO2WB.js";const k=JSON.parse('{"title":"【Skills】vim高效编辑","description":"","frontmatter":{"title":"【Skills】vim高效编辑","date":"2022-09-23T10:54:59.000Z","tags":["FPGA","Vim","Verilog"],"category":["Skills"]},"headers":[],"relativePath":"posts/【Skills】vim高效编辑.md","filePath":"posts/【Skills】vim高效编辑.md","lastUpdated":1727688963000}'),l={name:"posts/【Skills】vim高效编辑.md"};function n(d,t,h,p,r,o){return i(),e("div",null,t[0]||(t[0]=[a(`<p>复习编辑器之神<code>Vim</code>, 顺便立个Flag，以后的<code>verilog</code>都使用<code>Vim</code>进行编写。 🙌</p><h2 id="选择与替换" tabindex="-1">选择与替换 <a class="header-anchor" href="#选择与替换" aria-label="Permalink to &quot;选择与替换&quot;">​</a></h2><h3 id="选择块内容" tabindex="-1">选择块内容： <a class="header-anchor" href="#选择块内容" aria-label="Permalink to &quot;选择块内容：&quot;">​</a></h3><p>如果使用的是<code>GVim</code>，可以直接使用 鼠标进行拖动，<code>GVim</code>会自动进入<code>Visual Mode</code>。如果在拖动鼠标的同时按住键盘的<code>Alt</code>键，<code>Vim</code>就会进入<code>Visual-Block</code>模式，在这个模式下可以进行块选择。</p><div class="language-v vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">v</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; 快速选择段落内容</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">vip</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 选择 { ( [ 的内容</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; 选取上一次选择的区域, 正常模式下</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">gv</span></span></code></pre></div><p>在<code>Visual-Mode</code>中选择需要的内容后就可以使用<code>d x y p</code>等命令对选中的内容进行相关操作。</p><h3 id="搜索关键字" tabindex="-1">搜索关键字： <a class="header-anchor" href="#搜索关键字" aria-label="Permalink to &quot;搜索关键字：&quot;">​</a></h3><p>当需要在<code>Vim</code>中搜索关键字时，在<code>normal mode</code>下使用<code>/name</code> 进行搜索。</p><p>搜索时可以连接<strong>标识符</strong>，指定搜索的范围，是否大小写敏感等。具体表示符如下：</p><ul><li><code>/g</code> 表示在全局范围内进行操作</li><li><code>/c</code> 表示在替换操作时需要进行确认</li><li><code>/I</code>表示需要在搜索时对关键字的大小写敏感</li></ul><p><strong>指定搜索范围</strong>：</p><ul><li><code>:%</code> 代表整个文件</li><li><code>: i, j</code>搜索范围是 第 i 到 j行</li><li><code>:.,+x</code>搜索范围是从当前行和接下来的两行</li></ul><p>搜索关键字的一个重要作用就是在<code>/</code>前面加上<code>s</code>，就可以进行关键字的搜索替换，具体格式为:<code>s/name/new_name</code></p><p>例如，在写<code>testbench</code>的时候需要从原模块中复制输入输出的定义后将<code>input</code>替换为<code>reg</code>，将<code>output</code>替换为<code>wire</code>类型。可以使用如下命令进行修改替换：</p><div class="language-v vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">v</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; 全局范围内进行搜索 input 替换为 reg，% 代表整个文件，g 代表全局范围内，c代表在替换时需要进行逐项确认</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/input/reg/gc </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 在 i，j 行之间进行搜索替换</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:i,js</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">reg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gc</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; 在选中的内容中进行搜索替换</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:&lt;,&#39;&gt;s/input/reg</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 从当前行开始，向下两行的范围内进行搜索替换，点代表当前行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:.,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">reg</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; 在全局范围内对已经选择（搜索）到的关键字进行替换</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">//new_name/gc</span></span></code></pre></div><p>在搜索完成后可以使用<code>noh</code>取消搜索结果的高亮显示。</p><h2 id="批量操作" tabindex="-1">批量操作 <a class="header-anchor" href="#批量操作" aria-label="Permalink to &quot;批量操作&quot;">​</a></h2><h3 id="在多行添加内容" tabindex="-1">在多行添加内容： <a class="header-anchor" href="#在多行添加内容" aria-label="Permalink to &quot;在多行添加内容：&quot;">​</a></h3><p>在例化代码模块时，可以快速从源文件中将模块复制过来并将参数名统一添加<code>.</code>和括号<code>()</code>。</p><p>在列选择模式下选择第一列，按下 <code>I</code>，输入需要插入的内容后，按下<code>&lt;ESC&gt;</code>键后就可以完成批量添加。下面就是将<code>module</code>改为例化模块的方法。</p><p><img src="https://i.imgur.com/xkFkgMO.gif" alt="mutil-edit"></p><h3 id="宏功能" tabindex="-1">宏功能 <a class="header-anchor" href="#宏功能" aria-label="Permalink to &quot;宏功能&quot;">​</a></h3><p>宏功能可以将需要重复执行的动作记录下来，然后批量执行。</p><table tabindex="0"><thead><tr><th style="text-align:center;">命令</th><th style="text-align:center;">模式</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">qx</td><td style="text-align:center;">Normal Mode</td><td style="text-align:center;">录制宏 到 x，x可以是 abcde...等等</td></tr><tr><td style="text-align:center;">q</td><td style="text-align:center;">Normal Mode</td><td style="text-align:center;">停止录制</td></tr><tr><td style="text-align:center;">@x</td><td style="text-align:center;">Normal Mode</td><td style="text-align:center;">运行宏，可以在按之前输出数字指定重复执行的次数</td></tr></tbody></table><h2 id="快速对齐" tabindex="-1">快速对齐 <a class="header-anchor" href="#快速对齐" aria-label="Permalink to &quot;快速对齐&quot;">​</a></h2><p>使用<a href="https://github.com/junegunn/vim-plug" target="_blank" rel="noreferrer">Vim-Plug</a>安装<a href="https://github.com/junegunn/vim-easy-align" target="_blank" rel="noreferrer">Easy-Align</a>插件，并在<code>.vimrc</code>里面加上</p><div class="language-v vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">v</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xmap ga </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plug</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(EasyAlign)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nmap ga </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plug</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(EasyAlign)</span></span></code></pre></div><p>配置好后再<code>Visual-Mode</code>下选择需要对齐的代码，按下 <code>ga</code>+ <code>标识符</code>就可以快速对齐代码了。</p><p>例如需要对齐一些<code>localparam</code>的声明，再使用鼠标选择之后，按下<code>ga</code>+ <code>**</code> + <code>&lt;SPACE&gt;</code>就可以快速以空格为中心将代码进行对齐。</p><p>可以在输入对齐字符之前按下<code>&lt;Left&gt;</code> 或者<code>&lt;Right&gt;</code>选择左对齐或者右对齐。</p><p><img src="https://i.imgur.com/0tJE8pX.gif" alt="easy-align"></p><h2 id="快速移动" tabindex="-1">快速移动 <a class="header-anchor" href="#快速移动" aria-label="Permalink to &quot;快速移动&quot;">​</a></h2><h3 id="单词之间的移动" tabindex="-1">单词之间的移动 <a class="header-anchor" href="#单词之间的移动" aria-label="Permalink to &quot;单词之间的移动&quot;">​</a></h3><p>在<code>Vim</code>中使用光标移动到一个单词后，在<code>Normal Mode</code>下按下<code>*</code>，<code>Vim</code>就会自动高亮所有匹配的单词，再次按下<code>*</code>，指针就会跳转到下一个一样的单词，按下<code>#</code>可以跳转到上一个单词。</p><p>使用<code>~~</code>可以跳转到上一个编辑的位置。</p><blockquote><p>! 注意：这里是~~，~代表对的单词的大小写进行替换。</p></blockquote><h3 id="配对括号之间的跳转" tabindex="-1">配对括号之间的跳转 <a class="header-anchor" href="#配对括号之间的跳转" aria-label="Permalink to &quot;配对括号之间的跳转&quot;">​</a></h3><p>在一个括号上按下 <code>%</code>可以快速跳转到它匹配的另一半的位置。</p><h3 id="文件内跳转" tabindex="-1">文件内跳转 <a class="header-anchor" href="#文件内跳转" aria-label="Permalink to &quot;文件内跳转&quot;">​</a></h3><div class="language-v vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">v</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; n 为行数</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:n</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 跳转到文件头</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gg</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; 跳转到文件尾</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">G</span></span></code></pre></div><h3 id="行内的跳转" tabindex="-1">行内的跳转 <a class="header-anchor" href="#行内的跳转" aria-label="Permalink to &quot;行内的跳转&quot;">​</a></h3><div class="language-v vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">v</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; 下一个单词的第一个字母</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">w </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 上一个单词的第一个字母</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; 当前单词的最后一个字母，如果已经在最后一个字母，则会跳转到下一个单词的最后一个字母</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">e</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 上一个单词的最后一个字母</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ge</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; 跳转到行首</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">0</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 跳转到行尾</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$</span></span></code></pre></div><h3 id="easy-motion插件" tabindex="-1">Easy-Motion插件 <a class="header-anchor" href="#easy-motion插件" aria-label="Permalink to &quot;Easy-Motion插件&quot;">​</a></h3><p>使用<a href="https://github.com/junegunn/vim-plug" target="_blank" rel="noreferrer">Vim-Plug</a>安装<a href="https://github.com/easymotion/vim-easymotion" target="_blank" rel="noreferrer">Easy-Motion</a>插件，并在<code>.vimrc</code>里面加上</p><div class="language-v vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">v</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nmap s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plug</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(easymotion</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">overwin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>在<code>Normal-Mode</code>中按下<code>s</code>并输入想要跳转到地方的头两个单词，并按下屏幕中提示的字符就可以将指针快速地移动到指定为位置。</p><p>例如我当前的光标再<code>else</code>的位置，我想快速跳转到 <code>clk_baud</code>位置处。在<code>Normal Mode</code>下按下 scl，并根据提示按下<code>s</code>键，光标就跳转到了指定的位置。</p><p><img src="https://i.imgur.com/h6LqYRN.gif" alt="easy-motion"></p><h2 id="代码折叠" tabindex="-1">代码折叠 <a class="header-anchor" href="#代码折叠" aria-label="Permalink to &quot;代码折叠&quot;">​</a></h2><p>可以设置折叠的模式，这里直接设置为<code>marker</code>模式，且折叠标记设置为<code>//BEGIN</code>和<code>//END</code>。</p><div class="language-v vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">v</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:set foldmethod</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">marker</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:set foldmarker</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//BEGIN,//END</span></span></code></pre></div><table tabindex="0"><thead><tr><th style="text-align:center;">命令</th><th style="text-align:center;">模式</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">zc</td><td style="text-align:center;">Normal Mode</td><td style="text-align:center;">折叠当前块</td></tr><tr><td style="text-align:center;">zo</td><td style="text-align:center;">Normal Mode</td><td style="text-align:center;">展开当前块</td></tr><tr><td style="text-align:center;">zC</td><td style="text-align:center;">Normal Mode</td><td style="text-align:center;">折叠所有可以折叠的块</td></tr><tr><td style="text-align:center;">zO</td><td style="text-align:center;">Normal Mode</td><td style="text-align:center;">展开所有可以折叠的块</td></tr></tbody></table><h2 id="不常用操作" tabindex="-1">不常用操作 <a class="header-anchor" href="#不常用操作" aria-label="Permalink to &quot;不常用操作&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:center;">命令</th><th style="text-align:center;">模式</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">CTRL-O</td><td style="text-align:center;">Normal Mode</td><td style="text-align:center;">打开上一个最近打开的文件</td></tr><tr><td style="text-align:center;">CTRL-I</td><td style="text-align:center;">Normal Mode</td><td style="text-align:center;">打开下一个最近打开的文件</td></tr><tr><td style="text-align:center;">Ctrl-u</td><td style="text-align:center;">Normal Mode</td><td style="text-align:center;">向下移动半个屏幕</td></tr><tr><td style="text-align:center;">Ctrl-d</td><td style="text-align:center;">Normal Mode</td><td style="text-align:center;">向上移动半个屏幕</td></tr></tbody></table><h2 id="分屏操作" tabindex="-1">分屏操作 <a class="header-anchor" href="#分屏操作" aria-label="Permalink to &quot;分屏操作&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:center;">命令</th><th style="text-align:center;">模式</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">:vs</td><td style="text-align:center;">Normal Mode</td><td style="text-align:center;">横向拆分窗口</td></tr><tr><td style="text-align:center;">:sp</td><td style="text-align:center;">Normal Mode</td><td style="text-align:center;">纵向拆分窗口</td></tr><tr><td style="text-align:center;">C-w w h j k l</td><td style="text-align:center;">Normal Mode</td><td style="text-align:center;">切换当前窗口，w 是循环切换</td></tr><tr><td style="text-align:center;">C-w q</td><td style="text-align:center;">Normal Mode</td><td style="text-align:center;">关闭当前窗口</td></tr></tbody></table><h2 id="buffer操作" tabindex="-1">Buffer操作 <a class="header-anchor" href="#buffer操作" aria-label="Permalink to &quot;Buffer操作&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:center;">命令</th><th style="text-align:center;">模式</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">:ls</td><td style="text-align:center;">Normal Mode</td><td style="text-align:center;">列出当前所有打开的文件</td></tr><tr><td style="text-align:center;">:bn</td><td style="text-align:center;">Normal Mode</td><td style="text-align:center;">跳转到下一个编辑文件</td></tr><tr><td style="text-align:center;">:bp</td><td style="text-align:center;">Normal Mode</td><td style="text-align:center;">跳转到上一个打开的编辑文件</td></tr></tbody></table><h2 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h2><p>使用<code>--cmd</code> 可以在<code>shell</code>里面调用<code>vim</code>的命令，从而和<code>shell </code>进行结合并自动化完成某些操作</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --cmd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PluginInstall</span></span></code></pre></div>`,61)]))}const g=s(l,[["render",n]]);export{k as __pageData,g as default};
