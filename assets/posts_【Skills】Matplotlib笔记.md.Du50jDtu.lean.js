import{_ as i,c as a,a3 as t,o as l}from"./chunks/framework.DWZwO2WB.js";const r=JSON.parse('{"title":"【Skills】Matplotlib笔记","description":"","frontmatter":{"title":"【Skills】Matplotlib笔记","date":"2022-10-17T15:21:13.000Z","tags":["Python","matplotlib"],"category":["Skills"]},"headers":[],"relativePath":"posts/【Skills】Matplotlib笔记.md","filePath":"posts/【Skills】Matplotlib笔记.md","lastUpdated":1727688963000}'),p={name:"posts/【Skills】Matplotlib笔记.md"};function n(e,s,h,k,o,E){return l(),a("div",null,s[0]||(s[0]=[t(`<p>系统学习<code>matplotlib</code>的一些常见用法，节省需要用到的时候的搜索时间</p><p>框架结构，<code>Matplotlib</code>的架构分为三层，也就对应了几种代码画图风格。三个层分别为</p><ol><li>backend layer （最底层，没人使用）</li><li>artist layer （中层，灵活度很高，基本满足一切绘图要求）</li><li>scripting layer （高层，模仿Matlab 进行构建，但是不够灵活）</li></ol><p>常见的画图的代码通常包括两种风格：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> matplotlib.pyplot </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> plt</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plt.figure(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plt.subplot(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">211</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plt.plot(x0,y0)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plt.subplot(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">212</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plt.plot(x1,y1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plt.show()</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fig, ax </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> plt.subplots(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">figsize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">14</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ax[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].plot(x0,y0)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ax[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].plot(x1,y2)</span></span></code></pre></div><p>这两种画图风格就分别对应了<code>scripting layer</code> 和 <code>artist layer</code>两个不同封装层次的API。第二种画图风格是 <code>Matplotlib</code>官方所推荐的OOP 的画图方式。</p><p>主要元素</p><p><img src="https://matplotlib.org/stable/_images/anatomy.png" alt="../../_images/anatomy.png"></p><h3 id="axes" tabindex="-1">axes <a class="header-anchor" href="#axes" aria-label="Permalink to &quot;axes&quot;">​</a></h3><p><code>axes</code>并不是字面意义上的标轴，整个图像所能操作的区域都可以归为 <code>axes</code>。</p><p>Matplotlib uses <em>Axes</em> to refer to the drawing area that contains data, x- and y-axis, ticks, labels, title, etc.</p>`,12)]))}const c=i(p,[["render",n]]);export{r as __pageData,c as default};
