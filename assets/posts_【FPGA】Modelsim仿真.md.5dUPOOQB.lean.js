import{_ as a,c as i,a3 as e,o as t}from"./chunks/framework.DWZwO2WB.js";const r=JSON.parse('{"title":"【FPGA】FPGA时序约束","description":"","frontmatter":{"title":"【FPGA】FPGA时序约束","date":"2023-03-22T17:51:36.000Z","tags":["数字电路","FPGA","Verilog"],"category":["FPGA"]},"headers":[],"relativePath":"posts/【FPGA】Modelsim仿真.md","filePath":"posts/【FPGA】Modelsim仿真.md","lastUpdated":1727688963000}'),l={name:"posts/【FPGA】Modelsim仿真.md"};function n(p,s,h,o,d,k){return t(),i("div",null,s[0]||(s[0]=[e(`<p>（实习准备）学习如何使用 Modelsim 进行仿真。</p><h2 id="基本仿真流程指令" tabindex="-1">基本仿真流程指令 <a class="header-anchor" href="#基本仿真流程指令" aria-label="Permalink to &quot;基本仿真流程指令&quot;">​</a></h2><p>可以将需要执行的 指令放到一个 <code>*.do</code>文件中就执行后就直接可以进行仿真了。</p><p>可以直接拖拽 整个 <code>module</code>到波形窗口</p><div class="language-tcl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tcl</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 改变工作目录</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">cd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /dir</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 新建仿真库文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vlib work</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 编译源文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vlog *.v</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 执行仿真</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vsim -novopt work.&lt;testbench&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 执行仿真</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">run </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">0ns</span></span></code></pre></div><p>执行一个脚本的命令是</p><div class="language-tcl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tcl</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">do test.do</span></span></code></pre></div><h2 id="常用的使用-gui-的仿真流程" tabindex="-1">常用的使用 GUI 的仿真流程 <a class="header-anchor" href="#常用的使用-gui-的仿真流程" aria-label="Permalink to &quot;常用的使用 GUI 的仿真流程&quot;">​</a></h2><ol><li>改变工作目录</li><li>新建工程</li><li>添加或者编写文件</li><li>编译文件</li><li>创建 <code>Simulation Configration</code></li></ol><p>modelsim 中不同的符号会有不同的含义（后面补充）</p><h2 id="code-coverage" tabindex="-1">Code Coverage <a class="header-anchor" href="#code-coverage" aria-label="Permalink to &quot;Code Coverage&quot;">​</a></h2><p>ModelSim 的这功能可检查 经过仿真过后有多少的 代码是执行过，有多少是没有执行的。</p><p>如果需要做代码覆盖度检查，需要在编译的时候的命令需要改为</p><div class="language-tcl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tcl</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vopt +cover=becsxf test_sm -o test_sm_opt</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vsim -coverage test_sm_opt</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">run </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ms</span></span></code></pre></div><p>可以选择 <code>compile prospereties</code> 在 <code>Converage</code>下面进行设置</p><h2 id="data-flow" tabindex="-1">Data Flow <a class="header-anchor" href="#data-flow" aria-label="Permalink to &quot;Data Flow&quot;">​</a></h2><p>Debug 完成后通过右键选择信号添加到 Data Flow 窗口就可以看到</p><p>暂时不知道有什么用</p><h2 id="波形对比" tabindex="-1">波形对比 <a class="header-anchor" href="#波形对比" aria-label="Permalink to &quot;波形对比&quot;">​</a></h2><p>可以对比输出的波形是否符合测试条件</p><ol><li>生成基准波形的示例代码</li></ol><div class="language-tcl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tcl</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vlib work</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vlog *.v</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vopt +acc test_sm -o opt_test_gold</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 生成基准波形</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vsim -wlf gold.wlf opt_test_gold</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">add wave *</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">run </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">750</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ns</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">quit -sim</span></span></code></pre></div><p>在需要对比波形的 仿真结束后选择 <code>tools</code> -&gt; <code>Waveform Compare</code>-&gt; <code>Start Comprison</code> 选择完基准波形后就可以显示不一样的模型了。</p><h2 id="原理图生成" tabindex="-1">原理图生成 <a class="header-anchor" href="#原理图生成" aria-label="Permalink to &quot;原理图生成&quot;">​</a></h2><div class="language-tcl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tcl</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vsim -debugdb work.&lt;test_bench&gt;</span></span></code></pre></div><p>执行完成会自动进入 仿真界面，选择<code>view</code>-&gt;<code>schematic</code></p><p><img src="https://i.imgur.com/6D6GiSF.png" alt="image-20230331221928539"></p><p>选择后点击展开视图就可以查看原理图了</p><p><img src="https://i.imgur.com/IQoW46j.png" alt="image-20230331222205738"></p><h2 id="设置vscode-为默认编辑器" tabindex="-1">设置VSCode 为默认编辑器 <a class="header-anchor" href="#设置vscode-为默认编辑器" aria-label="Permalink to &quot;设置VSCode 为默认编辑器&quot;">​</a></h2><p>新建一个<code>$HOME/.mentor/perf.tcl</code>文件，然后添加下面的内容</p><div class="language-tcl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tcl</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">proc</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> external_editor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">filename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> linenumber} { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">exec</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;code&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -g </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$filename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$linenumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PrefSource(altEditor) external_editor</span></span></code></pre></div><p>在 <code>~/.zshrc</code>或者 <code>~/.bashrc</code>里面添加环境变量，这样就可以在开启软件的时候自动更换外部编辑器了。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MODELSIM_TCL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$HOME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/.mentor/perf.tcl&quot;</span></span></code></pre></div>`,34)]))}const g=a(l,[["render",n]]);export{r as __pageData,g as default};
