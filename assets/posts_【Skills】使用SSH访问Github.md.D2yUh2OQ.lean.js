import{_ as i,c as a,a3 as t,o as e}from"./chunks/framework.DWZwO2WB.js";const r=JSON.parse('{"title":"【Skills】Access Github Without Password","description":"记录配置使用 git 可以免密访问gtihub","frontmatter":{"title":"【Skills】Access Github Without Password","date":"2022-03-11T20:48:41.000Z","tags":["工具使用","Git"],"category":["Skills"],"description":"记录配置使用 git 可以免密访问gtihub"},"headers":[],"relativePath":"posts/【Skills】使用SSH访问Github.md","filePath":"posts/【Skills】使用SSH访问Github.md","lastUpdated":1727688963000}'),l={name:"posts/【Skills】使用SSH访问Github.md"};function h(n,s,p,o,d,k){return e(),a("div",null,s[0]||(s[0]=[t(`<p>为了更方便使用 Github，需要配置Github 的免密访问。</p><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>两种场景下需要用到免密访问</p><ol><li>将 仓库push 到Github</li><li>使用 git@ 开头的地址Clone 仓库到本地</li></ol><h2 id="配置-git-个人信息" tabindex="-1">配置 Git 个人信息 <a class="header-anchor" href="#配置-git-个人信息" aria-label="Permalink to &quot;配置 Git 个人信息&quot;">​</a></h2><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;用户名&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 最好和GitHub的用户名保持一致</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.email</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;邮箱&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 最好和GitHub的邮箱保持一致</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --list</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 查看配置是狗成功</span></span></code></pre></div><h2 id="生成rsa" tabindex="-1">生成RSA <a class="header-anchor" href="#生成rsa" aria-label="Permalink to &quot;生成RSA&quot;">​</a></h2><p>执行下面的命令</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ssh-keygen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rsa</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;github注册邮箱&quot;</span></span></code></pre></div><p>执行之后按两次回车，会在<code>~/.ssh/</code> 目录下生成一个 <code>id_rsa</code>和 <code>id_rsa.pub</code> 文件，分别对应私钥和公钥文件。</p><h2 id="设置github访问公钥" tabindex="-1">设置Github访问公钥 <a class="header-anchor" href="#设置github访问公钥" aria-label="Permalink to &quot;设置Github访问公钥&quot;">​</a></h2><p>依次进入 Accounts -&gt; Settings -&gt; SSH and GPG keys。点击New SSH key 将 <code>id_rsa.pub</code>文件的内容复制带Key里面，title 可以随便写。</p><p><img src="https://i.imgur.com/UqSMEjK.png" alt="image-20220312132811032"></p><h2 id="修改ssh-访问端口" tabindex="-1">修改SSH 访问端口 <a class="header-anchor" href="#修改ssh-访问端口" aria-label="Permalink to &quot;修改SSH 访问端口&quot;">​</a></h2><p>如果出现 <code>remote host close connection</code>错误。在<code>.ssh</code>文件夹下的<code>config</code>文件新增或者添加以下内容：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Host github.com</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    HostName ssh.github.com</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    User git</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    Port 443</span></span></code></pre></div><p>可以使用下面的命令测试是否可以正确访问 ：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -T</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git@github.com</span></span></code></pre></div><p>出现以下提示则说明可以成功访问了。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hi</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ***</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">!</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> You&#39;ve successfully authenticated, but GitHub does not provide shell access.</span></span></code></pre></div><h2 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h2><ol><li>不要修改 <code>id_rsa</code>和 <code>id_rsa.pub</code>文件的默认存放路径，git 会在每次上传的时候从<code>~/.ssh</code>文件夹中自动读取私钥并加密，这样就不用再输入密码了。</li></ol>`,22)]))}const g=i(l,[["render",h]]);export{r as __pageData,g as default};
