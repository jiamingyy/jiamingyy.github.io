import{_ as a,c as i,a3 as e,o as n}from"./chunks/framework.DWZwO2WB.js";const r=JSON.parse('{"title":"【Skills】makefile基础","description":"","frontmatter":{"title":"【Skills】makefile基础","date":"2022-04-11T09:58:15.000Z","tags":["linux","makefile"],"category":["Skills"]},"headers":[],"relativePath":"posts/【Skills】makefile基础.md","filePath":"posts/【Skills】makefile基础.md","lastUpdated":1727688963000}'),l={name:"posts/【Skills】makefile基础.md"};function t(p,s,k,h,c,d){return n(),i("div",null,s[0]||(s[0]=[e(`<p>继续备课，复习makefile的基础知识</p><p>Makefile 是由 make 命令引用的文本文件，它描述了目标的构建方式，并包含诸如源文件级依赖关系以及构建顺序依赖关系之类的信息。</p><h2 id="makefile基本结构" tabindex="-1">makefile基本结构 <a class="header-anchor" href="#makefile基本结构" aria-label="Permalink to &quot;makefile基本结构&quot;">​</a></h2><p>makefile的基本结构包括三个部分</p><div class="language-makefile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">target</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : prerequisites ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	[TAB]command</span></span></code></pre></div><ul><li><p>target</p><p>可以是一个object file（目标文件），也可以是一个执行文件，还可以是一个标签（label）</p></li><li><p>prerequisites</p><p>生成该target所依赖的文件或target</p></li><li><p>command</p><p>生成target需要执行的命令，一般为<code>shell</code>命令，prerequisites中如果有一个以上的文件比target文件要新的话，command所定义的命令就会被执行。</p></li></ul><p><strong>注意：command前面的TAB是必须的</strong></p><h2 id="makefile基本示例" tabindex="-1">makefile基本示例 <a class="header-anchor" href="#makefile基本示例" aria-label="Permalink to &quot;makefile基本示例&quot;">​</a></h2><p>首先在一个目录下新建,<code>main.c</code>,<code>func1.c</code>,<code>func1.h</code>三个文件。其中<code>main.c</code>文件依赖于<code>func1.c</code>文件中的<code>func1</code>函数。在目录中新建一个<code>makefile</code>，写入如下内容。</p><div class="language-makefile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: main.o func1.o</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	gcc -o main1 func1.o main.o</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main.o</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: main.c</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	gcc -c main.c</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">func1.o</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: func1.c func1.h</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	gcc -c func1.c</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	rm -rf *.o</span></span></code></pre></div><p>在终端<code>cd</code>进入目录之后，执行<code>make</code>命令就可以将直接编译出可执行文件<code>main1</code>。</p><p>也可以手动执行<code>make all</code>指令指定生成，当没有为<code>make</code>指定生成的target 时，则默认选择第一个target。</p><p>使用 <code>make clean</code>可以删除编译中生成的<code>.o</code>结尾的中间文件。</p><h2 id="makefile中的变量" tabindex="-1">makefile中的变量 <a class="header-anchor" href="#makefile中的变量" aria-label="Permalink to &quot;makefile中的变量&quot;">​</a></h2><p>可以看到虽然上一节中使用<code>makefile</code>简化了编译所输入的命令，但是所编写的 <code>makefile</code>中含有很多 <code>.o</code>结尾的prerequisites，当所依赖的文件过多时，<code>makefile</code>就会变的非常复杂，为了进一步简化书写，可以使用变量简化<code>makefile</code>。</p><div class="language-makefile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">objects = main.o kbd.o command.o </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">objects</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    gcc -o edit </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">objects</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main.o</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : main.c defs.h</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    gcc -c main.c</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kbd.o</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : kbd.c defs.h command.h</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    gcc -c kbd.c</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">command.o</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : command.c defs.h command.h</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    gcc -c command.c</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rm edit </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">objects</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span></span></code></pre></div>`,16)]))}const E=a(l,[["render",t]]);export{r as __pageData,E as default};
