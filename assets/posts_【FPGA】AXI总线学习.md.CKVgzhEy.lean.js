import{_ as i,c as t,a3 as a,o as e}from"./chunks/framework.DWZwO2WB.js";const d=JSON.parse('{"title":"【FPGA】AXI总线学习","description":"","frontmatter":{"title":"【FPGA】AXI总线学习","date":"2023-03-22T21:28:12.000Z","tags":["数字电路","FPGA","Verilog"],"category":["FPGA"]},"headers":[],"relativePath":"posts/【FPGA】AXI总线学习.md","filePath":"posts/【FPGA】AXI总线学习.md","lastUpdated":1727688963000}'),o={name:"posts/【FPGA】AXI总线学习.md"};function p(A,l,r,s,n,c){return e(),t("div",null,l[0]||(l[0]=[a('<p>手撕 AXI 总线</p><h2 id="axi-总线" tabindex="-1">AXI 总线 <a class="header-anchor" href="#axi-总线" aria-label="Permalink to &quot;AXI 总线&quot;">​</a></h2><p>AXI（Advanced eXtensible Interface）是一种总线协议，该协议是ARM公司提出的AMBA（Advanced Microcontroller Bus Architecture）3.0协议中最重要的部分，是一种<strong>面向高性能、高带宽、低延迟的片内总线</strong>。</p><p>AMBA 总线包括三个部分</p><ol><li>APB</li><li>AHB</li><li>AXI: 向后兼容 AHB 和 APB</li></ol><p>AXI 的特点：</p><ol><li>突发传输，可以一直传输，效率高</li></ol><p>时序顺序，参考 IHI022E 文档</p><p><img src="https://i.imgur.com/cXZVhJK.png" alt="读数据过程"></p><p><img src="https://i.imgur.com/yVyAMVq.png" alt="写数据过程"></p><p>AXI 总线包含 5个通道，五个通道可以使读写数据过程分离。</p><ol><li>写地址通道，信号前缀（aw_）</li><li>写数据通道，信号前缀（w_）</li><li>写响应通道，信号前缀（b_）</li><li>读地址通道，信号前缀（ar_）</li><li>读数据通道，信号前缀（r_）</li></ol><p>前三个通道完成写数据的过程，后两个通道完成读数据的过程。</p><p>AXI 的时序，参考 XILINX 的代码，可以 使用 VIVADO自动生成的IP 进行仿真后查看时序</p><p>波形时序：</p><ol><li>VALID 和 READY 同时为高代表数据有效，其中VALID来自主机，READY 来自从机</li><li>先写地址，紧接着写数据，最后一个数据跟随LAST</li><li>先读地址，紧接着读数据，最后一个数据跟随LAST信号</li><li>写完数据，有一个响应信号。</li></ol><p>==LAST信号仅仅存在于数据读写数据通道中，在读写地址通道中是不包含的==</p><h2 id="axi-实现步骤" tabindex="-1">AXI 实现步骤 <a class="header-anchor" href="#axi-实现步骤" aria-label="Permalink to &quot;AXI 实现步骤&quot;">​</a></h2><p>突发传输的数据长度为 1 - 256 （2的n 次方）</p><p>写步骤</p><ol><li>写首地址 （写地址通道）</li><li>写完首地址，突发传输数据（写数据通道）</li><li>控制LAST 信号（写数据通道）</li><li>等待响应信号 （写响应通道）</li></ol><p>读步骤</p><ol><li>写首地址</li><li>等待从机传输的数据，当VALID和READY都为高时读取数据</li><li>接受LAST信号</li></ol><p>实现的功能：</p><ol><li>向从机的 0 地址写 1 - 10;</li><li>读从机的 0 地址</li></ol>',25)]))}const X=i(o,[["render",p]]);export{d as __pageData,X as default};
